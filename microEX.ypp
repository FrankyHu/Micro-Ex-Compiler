%{
#include <iostream>
#include <sstream>
#include <string>
#include <deque>

struct symtab {
	char *name;
	char *type;
};
using namespace std;
extern int yylex(void);
void yyerror (const char *s){cerr << s << endl;} // Print error message
deque <string> result; // Result
deque <int> nested; // To support nested structure
int tempVariableCounter = 0; // Temp variable counter
int jumpCounter = 0; // Jump counter
string intToString(int &i); // Convert integer to string
symtab SYMBOL_TABLE[1000];
symtab OP_TABLE[1000];
symtab *findForSymbol(const char *s,const char *s2);
symtab *findForOP(const char *s);

%}

%union{
	struct symtab *symp;
	struct symtab *opt;
}
%token<opt> PROGRAM BEGIN_T END DECLARE AS INTEGER FLOAT ASSIGN GE NE E LE JL JG EXPR STEP IF THEN ELSE ENDIF FOR TO DOWNTO ENDFOR WHILE ENDWHILE
%token<symp> INT_LITERAL FLOAT_LITERAL STR_LITERAL ID EXP_FLOAT_LITERAL
%type<symp> assign_stmt expr_list name_list type primary expr mulexp bool_expr bool_op assign_primary for_t while_t to_downto else_t
%%
start:
		PROGRAM ID program {
			result.push_front("\tSTART " + string($2->name));
			result.push_back("\tHALT " + string($2->name));
		}
	;

program:
		BEGIN_T stmt_list END 			
	|	BEGIN_T END 						
	;

stmt_list:
		stmt stmt_list				
	|	stmt 							
	;

stmt:
		declare_stmt ';'								
	|	func_stmt ';'	
	|	assign_stmt ';'	
	|	if_stmt
	|	loop_stmt
	;

declare_stmt:
		DECLARE name_list AS type {
			char * tmp = strtok($2->name, ",");
			while (tmp != NULL) {
				result.push_back("\tDeclare " + string(tmp) + ", " + string($4->name));
				findForSymbol(tmp,$4->name);
				tmp = strtok(NULL, ",");
				if (tmp != NULL && tmp[0] >= '0' && tmp[0] <= '9'){
					result.back() = result.back() + "_array," + string(tmp);
					tmp = strtok(NULL, ",");
				}
			}
		}
	;

func_stmt:
		ID '(' expr_list ')' { 
			string tmp = "\tCALL " + string($1->name) + "," + string($3->name);	
			result.push_back(tmp);
		}
	;

assign_stmt:
		assign_primary ASSIGN expr {
			symtab* id = findForSymbol($1->name,$1->type);
			if (strcmp(id->type,"Integer") == 0) {
				result.push_back("\tI_STORE " + string($3->name) + "," + string($1->name));
			}
			else if (strcmp(id->type,"Float")==0) {
				result.push_back("\tF_STORE " + string($3->name) + "," + string($1->name));
			}
			$$ = $1;
		}
	;

assign_primary:
		ID '[' expr ']' {
			$$ = new symtab();
			$$->type = findForSymbol($1->name,"")->type;
			$$->name = strcat(strcat(strcat(strdup($1->name),"["),$3->name), "]"); 
			$$->name = strdup((string($1->name)+"["+string($3->name)+"]").data());
		}

	|	ID {
			$$ = findForSymbol($1->name,"");
		}
	;

if_stmt:
		IF '(' bool_expr ')' THEN stmt_list else_t stmt_list ENDIF {
			jumpCounter++;
			result.push_back("lb&" + string($7->name) + ":");
		}
	|	IF '(' bool_expr ')' THEN stmt_list ENDIF {
			result.push_back("lb&" + string($3->name) + ":");
			nested.pop_front();
		}
	;

else_t:
		ELSE {
			jumpCounter++;
			result.push_back("\tJ lb&" + intToString(jumpCounter));
			$$ = new symtab();
			$$->name = strdup(intToString(jumpCounter).data());
			result.push_back("lb&" + intToString(nested.front()) + ": ");
			nested.pop_front();
		}
	;

loop_stmt:
		for_t to_downto expr ')' stmt_list ENDFOR {
			if (strcmp($2->name,"TO") == 0) {
				result.push_back("\tINC " + string($1->name));
			}
			else if (strcmp($2->name,"DOWNTO") == 0) {
				result.push_back("\tDEC " + string($1->name));
			}

			if (strcmp(findForSymbol($1->name,"")->type,"Integer") == 0) {
				result.push_back("\tI_CMP " + string($1->name) + "," + string($3->name));
			}
			else if (strcmp(findForSymbol($1->name,"")->type,"Float") == 0){
				result.push_back("\tF_CMP " + string($1->name) + "," + string($3->name));
			}

			if (strcmp($2->name,"TO") == 0){
				result.push_back("\tJL lb&" + string($1->type));
			}
			else if (strcmp($2->name,"DOWNTO") == 0){
				result.push_back("\tJG lb&" + string($1->type));
			}
		}
	|	for_t to_downto expr STEP expr ')' stmt_list ENDFOR {
			tempVariableCounter++;
			findForSymbol(string("T&"+intToString(tempVariableCounter)).data(), (const char*)$2->type);
			if (strcmp($2->name,"TO") == 0) {
				result.push_back("\tI_ADD " + string($1->name) + "," + string($5->name) + ",T&" + intToString(tempVariableCounter));
				result.push_back("\tI_STORE T&" + intToString(tempVariableCounter) + "," + string($1->name));
			}
			else if (strcmp($2->name,"DOWNTO") == 0) {
				result.push_back("\tI_SUB " + string($1->name) + "," + string($5->name) + ",T&" + intToString(tempVariableCounter));
				result.push_back("\tI_STORE T&" + intToString(tempVariableCounter) + "," + string($1->name));
			}
			
			if (strcmp(findForSymbol($1->name,"")->type,"Integer") == 0) {
				result.push_back("\tI_CMP " + string($1->name) + "," + string($3->name));
			}
			else if (strcmp(findForSymbol($1->name,"")->type,"Float") == 0){
				result.push_back("\tF_CMP " + string($1->name) + "," + string($3->name));
			}
			
			if (strcmp($2->name,"TO") == 0) {
				result.push_back("\tJL lb&" + string($1->type));
			}
			else if (strcmp($2->name,"DOWNTO") == 0){
				result.push_back("\tJG lb&" + string($1->type));
			}
		}
	|	while_t '(' bool_expr ')' stmt_list ENDWHILE {
			result.push_back("\tJ lb&" + string($1->type));
			result.push_back("lb&" + intToString(nested.front()) + ": ");
			nested.pop_front();
		}
	;

for_t:
		FOR '(' assign_stmt {
			jumpCounter++;
			result.push_back("lb&" + intToString(jumpCounter) + ":");
			$$ = new symtab();
			$$->name = $3->name;
			$$->type = strdup(intToString(jumpCounter).data());
		}
	;

while_t:
		WHILE {
			jumpCounter++;
			result.push_back("lb&" + intToString(jumpCounter) + ":");
			$$ = new symtab();
			$$->type = strdup(intToString(jumpCounter).data());
		}
	;

to_downto:
		TO {
			$$ = $1; $$->name = strdup("TO");
		}
	|	DOWNTO {
			$$ = $1; $$->name = strdup("DOWNTO");
		}
	;

bool_expr:
		expr bool_op expr {
			symtab* id = findForSymbol($1->name,$1->type);
			jumpCounter++;
			if (strcmp(id->type,"Integer") == 0) {
				result.push_back("\tI_CMP " + string($1->name) + "," + string($3->name));
			}
			else if (strcmp(id->type,"Float") == 0) {
				result.push_back("\tF_CMP " + string($1->name) + "," + string($3->name));
			}
			result.push_back("\t" + string($2->name) + " lb&" + intToString(jumpCounter));
			$$ = new symtab();
			$$->name = strdup(intToString(jumpCounter).data());
			nested.push_front(jumpCounter);
		}
	;

bool_op:
		GE {
			$$ = new symtab(); 
			$$->name = (char *)"JL";
		}

	|	LE {
			$$ = new symtab(); 
			$$->name = (char *)"JG";
		}
	
	|	JL {
			$$ = new symtab();
			$$->name = (char *)"JLE";
		}
	
	|	JG {
			$$ = new symtab(); 
			$$->name = (char *)"JGE";
		}	

	|	E {
			$$ = new symtab(); 
			$$->name = (char *)"JNE";
		}	

	|	NE {
			$$ = new symtab(); 
			$$->name = (char *)"JE";
		}
	;

name_list:
		ID '[' expr ']' ',' name_list {
			$$ = new symtab(); 
			$$->name = strdup((string($1->name)+","+string($3->name)+","+string($6->name)).data());
			$$->type = findForSymbol($1->name,"")->type;
		}
	|	ID '[' expr ']' {
			$$ = new symtab(); 
			$$->name = strdup((string($1->name)+","+string($3->name)).data());
			$$->type = $1->type;
		}
	|	ID ',' name_list {
			$$ = new symtab(); 
			$$->name = strdup((string($1->name)+","+string($3->name)).data());
			$$->type = $1->type;
		}
	|	ID {
			$$ = findForSymbol($1->name,"");
		}
	;

type:
		INTEGER {
			$$ = $1;
		}

	|	FLOAT {
			$$ = $1;
		}
	;		
	
primary:
		'-' primary { 
			tempVariableCounter++;
			result.push_back("\tUMINUNS " + string($2->name) + ",T&" + intToString(tempVariableCounter));
			findForSymbol(string("T&"+intToString(tempVariableCounter)).data(), (const char*)$2->type);
			$$ = new symtab(); 
			$$->name = strdup((char*)string(string("T&")+intToString(tempVariableCounter)).data());
			$$->type = $2->type;
		}

	|	ID '[' expr ']' { 
			$$ = new symtab(); 
			$$->name = strdup((string($1->name)+"["+string($3->name)+"]").data());
			$$->type = findForSymbol($1->name,"")->type; 
		}

	|	'(' expr ')'{
			$$ = $2;
		}

	|	ID {
			$$ = findForSymbol($1->name,"");
		}

	|	INT_LITERAL {
			$$ = findForSymbol($1->name,"Integer");
		}

	|	FLOAT_LITERAL {
			$$ = findForSymbol($1->name,"Float");
		}
	;

expr:
		expr '+' mulexp { 			
			symtab* id = findForSymbol($1->name,$1->type);
			tempVariableCounter++;
			findForSymbol(string("T&"+intToString(tempVariableCounter)).data(), (const char*)$1->type);
			if (strcmp(id->type,"Integer") == 0) {
				result.push_back("\tI_ADD " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			else if (strcmp(id->type,"Float") == 0) {
				result.push_back("\tF_ADD " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			$$ = new symtab();
			$$->name = strdup((char*)string(string("T&")+intToString(tempVariableCounter)).data());		
			$$->type = $1->type;
		}

	|	expr '-' mulexp { 
			symtab* id = findForSymbol($1->name,$1->type);
			tempVariableCounter++;
			findForSymbol(string("T&"+intToString(tempVariableCounter)).data(), (const char*)$1->type);
			if (strcmp(id->type,"Integer") == 0) {
				result.push_back("\tI_SUB " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			else if (strcmp(id->type,"Float") == 0) {
				result.push_back("\tF_SUB " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			$$ = new symtab();
			$$->name = strdup((char*)string(string("T&")+intToString(tempVariableCounter)).data());
			$$->type = $1->type;
		}

	|	mulexp {
			$$ = $1;
		}
	;
	
mulexp:
		mulexp '*' primary {
			symtab* id = findForSymbol($1->name,$1->type);
			tempVariableCounter++;
			findForSymbol(string("T&"+intToString(tempVariableCounter)).data(), (const char*)$1->type);
			if (strcmp(id->type,"Integer") == 0) {
				result.push_back("\tI_MUL " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			else if (strcmp(id->type,"Float") == 0) {
				result.push_back("\tF_MUL " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			$$ = new symtab();
			$$->name = strdup((char*)string(string("T&")+intToString(tempVariableCounter)).data());		
			$$->type = $1->type;
		}

	|	mulexp '/' primary { 
			symtab* id = findForSymbol($1->name,$1->type);
			tempVariableCounter++;
			findForSymbol(string("T&"+intToString(tempVariableCounter)).data(), (const char*)$1->type);
			if (strcmp(id->type,"Integer") == 0) {
				result.push_back("\tI_DIV " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			else if (strcmp(id->type,"Float") == 0) {
				result.push_back("\tF_DIV " + string($1->name) + "," + string($3->name) + ",T&" + intToString(tempVariableCounter));
			}
			$$ = new symtab();
			$$->name = strdup((char*)string(string("T&")+intToString(tempVariableCounter)).data());		
			$$->type = $1->type;
		}

	|	primary {
			$$ = $1;
		}
	;

expr_list:
		expr ',' expr_list { 
			$$ = new symtab(); 
			$$->name = strdup((string($1->name)+","+string($3->name)).data());
			$$->type = $1->type; 
		}

	|	expr {
			$$ = $1;
		}
	;
	
%%

int main() {
	yyparse();
	for (int a = 0; a < result.size(); a++) {
		cout << result.at(a) << endl;
	}

	for (int a = 1; a <= tempVariableCounter; a++) {
		cout<< "\tDeclare T&" << a << ", " << findForSymbol(string("T&"+intToString(a)).data(),"")->type << endl;
	}

	return 0;
}

string intToString(int &i) {
	string s;
	stringstream ss(s);
	ss << i;
	return ss.str();
}

symtab * findForSymbol(const char *s, const char *s2) {
	struct symtab *sp;
	for (sp = SYMBOL_TABLE; sp < &SYMBOL_TABLE[1000]; sp++) {
		if (sp->name && !strcmp(sp->name, s)) {
			if (strcmp(s2,"") != 0) {
				sp->type=strdup(s2);
			}
			return sp;
		}
		if (!sp->name) {
			sp->name = strdup(s);
			sp->type = strdup(s2);
			return sp;
		}
	}
	yyerror("Symbol can not found.");
	exit(1);
}

symtab * findForOP(const char *s) {
	struct symtab *sp;	
	for (sp = OP_TABLE; sp < &OP_TABLE[1000]; sp++) {
		if (sp->name && !strcmp(sp->name, s))
			return sp;
		if (!sp->name) {
			sp->name = strdup(s);
			return sp;
		}
	}
	yyerror("Symbol can not found.");
	exit(1);
}
